// Code generated by 'go generate'; DO NOT EDIT.

package main

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	moduser32 = windows.NewLazySystemDLL("user32.dll")

	procMessageBoxW = moduser32.NewProc("MessageBoxW")
)

func MessageBox(handle int, text string, caption string, typeBox int) (retValue int, err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(text)
	if err != nil {
		return
	}
	var _p1 *uint16
	_p1, err = syscall.UTF16PtrFromString(caption)
	if err != nil {
		return
	}
	return _MessageBox(handle, _p0, _p1, typeBox)
}

func _MessageBox(handle int, text *uint16, caption *uint16, typeBox int) (retValue int, err error) {
	r0, _, e1 := syscall.Syscall6(procMessageBoxW.Addr(), 4, uintptr(handle), uintptr(unsafe.Pointer(text)), uintptr(unsafe.Pointer(caption)), uintptr(typeBox), 0, 0)
	retValue = int(r0)
	if retValue == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}
